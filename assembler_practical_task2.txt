%macro pushd 0
	push eax
	push ebx
	push ecx
	push edx
%endmacro

%macro popd 0
	pop edx
	pop ecx
	pop ebx
	pop eax
%endmacro

%macro print 2
	pushd
	mov edx, %1
	mov ecx, %2
	mov ebx, 1
	mov eax, 4
	int 0x80
	popd
%endmacro

%macro dprint 0
	pushd
	mov ecx, 10
	mov bx, 0

%%_divide:
	xor edx, edx
	div ecx
	push dx
	inc bx
	test eax, eax
	jnz %%_divide

%%_digit:
	pop ax
	add ax, '0'
	mov [reminder], ax
	print 1, reminder
	dec bx
	cmp bx, 0
	jg %%_digit
	popd
%endmacro

section .text

global _start

_start:
	mov ebx, 0
	mov al, 0
    

_for:
	mov al, [array+ebx]
	cmp al, 97
	jl _exit
	cmp al, 122
	jg _exit
	sub al, 32
    
    
_exit:
	mov [array+ebx], al
	mov al, 0
	inc ebx
	cmp ebx, len
	jl _for
	print len, array
    
    
    
    
	mov eax, 1
	int 0x80

    
section .data
	array db "Hello WorLDD!@%^"
	len equ $ - array
	newline db 0xA, 0xD
	nlen equ $ - newline


segment .bss

	reminder resb 1
	reminder2 resb 1
